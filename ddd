@njit
def _build_base_triangle(data_paid, n_dev):
    """
    Zwraca kopię trójkąta z (n_dev+1) kolumnami.
    Brakujące komórki wypełnione są NaN-ami (jak w oryginalnym kodzie).
    """
    mm, n_cols_orig = data_paid.shape
    total_cols = n_dev + 1                       # +1 bo ostatnia „ultimate”
    base = np.empty((mm, total_cols), dtype=np.float64)

    # wypełniamy istniejącą część
    for i in range(mm):
        for j in range(total_cols):
            if j < n_cols_orig:
                base[i, j] = data_paid[i, j]
            else:
                base[i, j] = np.nan
    return base
