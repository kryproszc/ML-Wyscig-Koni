<div key={version} className="mt-10 overflow-x-auto rounded-xl border border-slate-700 shadow-md">
  <h4 className="text-white/90 text-md font-semibold px-4 pt-4">
    Współczynniki
  </h4>
  <div className="overflow-x-auto"> {/* <== suwak */}
    <table className="table-fixed border-collapse min-w-max"> {/* <== sztywne kolumny */}
      <thead>
        <tr>
          <td className="px-4 py-2 border bg-slate-800 text-white font-semibold w-[80px]">Rodzaj</td>
          {colHeaders.map((header, i) => (
            <td key={i} className="px-4 py-2 border bg-slate-800 text-center text-white font-semibold w-[100px]">
              {header}
            </td>
          ))}
        </tr>
      </thead>
      <tbody>
        {[{ label: 'Dev', data: dev }, { label: 'SD', data: sd }, { label: 'σ', data: sigma }].map((row, i) => (
          <tr key={i}>
            <td className="px-4 py-2 border font-bold text-slate-400 bg-slate-800 w-[80px]">
              {row.label}
            </td>
            {row.data.map((val, j) => (
              <td key={j} className="px-2 py-1 border bg-slate-800 text-right brightness-90 w-[100px]">
                <input
                  type="number"
                  step="0.0000000001"
                  defaultValue={val}
                  className="bg-transparent text-right w-full px-1 outline-none"
                  onBlur={(e) => {
                    const parsed = parseFloat(e.target.value);
                    if (!isNaN(parsed) && parsed !== val) {
                      const updated = [...row.data];
                      updated[j] = parsed;

                      if (row.label === 'Dev') setDev(updated);
                      if (row.label === 'SD') setSd(updated);
                      if (row.label === 'σ') setSigma(updated);
                      setVersion((v) => v + 1);
                    }
                  }}
                />
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  </div>
</div>
