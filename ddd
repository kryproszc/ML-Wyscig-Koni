from numba import njit
import numpy as np

@njit
def sigma_LRMPC(paid: np.ndarray, exposure: np.ndarray, w: np.ndarray, wsp_LR_j: np.ndarray) -> np.ndarray:
    mm, nn = paid.shape
    sigma_j = np.empty(nn)

    for j in range(nn):
        suma_l = 0.0
        suma_m = 0.0

        for i in range(mm - j):
            ei = exposure[i]

            if (
                np.isnan(paid[i, j])
                or (j > 0 and np.isnan(paid[i, j - 1]))
                or np.isnan(ei)
                or np.isnan(w[i, j])
            ):
                continue

            # Obliczanie LR_i,j
            if j == 0:
                LR_ij = paid[i, j] / ei
            else:
                LR_ij = (paid[i, j] - paid[i, j - 1]) / ei

            diff2 = (LR_ij - wsp_LR_j[j]) ** 2
            suma_l += diff2 * w[i, j] * ei
            suma_m += w[i, j] * ei

        # Unbiased estimator: dzielimy przez (suma wag - 1)
        if suma_m > 1.0:
            sigma_j[j] = suma_l / (suma_m - 1.0)
        else:
            sigma_j[j] = 0.0

    return sigma_j
sigma = sigma_LRMPC(paid.values.astype(float), exposure.values.astype(float), w.values.astype(float), wsp_LR)
