    def triangle_forward_np(data, f, k_forward_start, discount_factors):
        data = data.copy()
        mm, nn = data.shape

        # Zachowujemy oryginalną pierwszą kolumnę
        base_col = data[:, 0].copy()

        # Rozszerz dane, jeśli trzeba
        if len(f) > mm:
            pad_width = len(f) + 1 - nn
            if pad_width > 0:
                data = np.hstack((data, np.full((mm, pad_width), np.nan)))

        # Projekcja forward
        for j in range(k_forward_start - 1, len(f)):
            max_ind_row = max(0, mm - j - 1)
            for i in range(max_ind_row, mm):
                data[i, j + 1] = data[i, j] * f[j]

        # Tworzenie trójkąta z bazową kolumną
        cols_tmp = data.shape[1]
        tri_proj = np.full((mm, cols_tmp + 1), np.nan)
        tri_proj[:, 0] = base_col
        tri_proj[:, 1:] = data


        print(pd.DataFrame(data).to_string())
        # Liczymy przyrosty (różnice kolumna po kolumnie)
        inc_proj = tri_proj[:, 1:] - tri_proj[:, :-1]
        inc_proj[:, 0] = base_col
        total = np.nansum(inc_proj)
        print("Suma wszystkich wartości w inc_proj:", total)

        print("Przyrosty przed dyskontem:")
        print(pd.DataFrame(inc_proj).to_string())

        # Dyskontujemy tylko wartości na prawo od odwrotnej przekątnej
        for rr in range(mm - 1, -1, -1):
            offset = mm - 1 - rr
            for cc in range(offset + 1, inc_proj.shape[1]):
                idx = cc - (offset + 1)
                if idx < len(discount_factors) and not np.isnan(inc_proj[rr, cc]):
                    inc_proj[rr, cc] /= discount_factors[idx]

        print("Zdyskontowane przyrosty (na prawo od odwrotnej przekątnej):")
        print(pd.DataFrame(inc_proj))

        total = np.nansum(inc_proj)
        print("Suma wszystkich wartości w inc_proj:", total)
        return 1  # lub np.nansum(inc_proj[:, -1]) jeśli chcesz sumę


    print(triangle_forward_np(data_paid_np, dev_arr, 0,discount_factors))

