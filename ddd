import React, { useEffect, useState, useMemo } from "react";
import {
  ResponsiveContainer,
  ComposedChart,
  Scatter,
  Line,
  Area,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip,
  ReferenceLine,
} from "recharts";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { TableDataCor } from "@/components/TableDataCor";
import type { CorRowData } from "@/components/TableDataCor";

/* -------------------------------------------------------------------------- */
/*                                   TYPES                                    */
/* -------------------------------------------------------------------------- */

interface ObsRow {
  origin_period: number;
  dev_period: number;
  cal_period: number;
  residuals: number;
  standard_residuals: number;
  fitted_value: number;
}

interface LowessRow {
  x: number;
  lowess: number;
}

interface LowessResults {
  fitted_value: LowessRow[];
  origin_period: LowessRow[];
  cal_period: LowessRow[];
  dev_period: LowessRow[];
}

interface ResidualsResp {
  obs_vs_fitted: ObsRow[];
  lowess_results: LowessResults;
}

interface DependenceSummary {
  results: { [key: string]: number | null };
  range: { Lower: number | null; Upper: number | null };
}

interface DensityPlot {
  curve: [number, number][];
  ci_area: [number, number][];
  T_stat: number;
  T_y: number;
}

interface DependenceResp {
  T_stat: number | null;
  Var: number | null;
  Range: [number | null, number | null];
  ci: number;
  summary: DependenceSummary;
  density_plot?: DensityPlot;
}

interface DensityPlot2 {                     // ‚¨ÖÔ∏è¬†NOWE
  curve: [number, number][];
  ci_area: [number, number][];
  Z_stat: number;
  Z_y: number;
}
type Totals = {
  Z: number;
  "E[Z]": number;
  "Var[Z]": number;
};
interface Dep2Resp {
  totals: Totals;
  range:  { Lower: number; Upper: number };
  ci: number;
  density_plot?: DensityPlot2;
}
/* --- ‚¨Ü‚ßâ NOWE ‚¨Ü ----------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                 STALE DANE                                 */
/* -------------------------------------------------------------------------- */

const triangle = [
  [5012, 8269, 10907, 11805, 13539, 16181, 18009, 18608, 18662, 18834],
  [106, 4285, 5396, 10666, 13782, 15599, 15496, 16169, 16704, null],
  [3410, 8992, 13873, 16141, 18735, 22214, 22863, 23466, null, null],
  [5655, 11555, 15766, 21266, 23425, 26083, 27067, null, null, null],
  [1092, 9565, 15836, 22169, 25955, 26180, null, null, null, null],
  [1513, 6445, 11072, 12935, 15852, null, null, null, null, null],
  [557, 4020, 10946, 12314, null, null, null, null, null, null],
  [1351, 6947, 13112, null, null, null, null, null, null, null],
  [3133, 5395, null, null, null, null, null, null, null, null],
  [2063, null, null, null, null, null, null, null, null, null],
];

const CHARTS = [
  {
    key: "fitted_value",
    title: "Reszty vs. Dopasowane",
    xLabel: "Fitted",
    xAccessor: (d: ObsRow) => d.fitted_value,
  },
  {
    key: "origin_period",
    title: "Reszty vs. Origin period",
    xLabel: "Origin period",
    xAccessor: (d: ObsRow) => d.origin_period,
  },
  {
    key: "cal_period",
    title: "Reszty vs. Calendar period",
    xLabel: "Calendar period",
    xAccessor: (d: ObsRow) => d.cal_period,
  },
  {
    key: "dev_period",
    title: "Reszty vs. Development period",
    xLabel: "Development period",
    xAccessor: (d: ObsRow) => d.dev_period,
  },
] as const;

/* -------------------------------------------------------------------------- */
/*                                 KOMPONENT                                  */
/* -------------------------------------------------------------------------- */

export default function CheckAssumption() {
  /* ------------------------------ STANY/UI -------------------------------- */
  type TabKey = "model" | "assumptions" | "analysis" | "summary";
  const [activeTab, setActiveTab] = useState<TabKey>("model");

  const [residualsData, setResidualsData] = useState<ResidualsResp | null>(null);
  const [dependenceData, setDependenceData] = useState<DependenceResp | null>(null);

  /* --- ‚¨á‚ßâ NOWE ‚¨á --------------------------------------------------------- */
  const [dep2Data, setDep2Data] = useState<Dep2Resp | null>(null);
  /* --- ‚¨Ü‚ßâ NOWE ‚¨Ü --------------------------------------------------------- */

  const [error, setError] = useState<string | null>(null);

  const [alpha, setAlpha] = useState(1.0);
  const [ci, setCi] = useState(0.5);

  /* --------------------------- POBIERANIE DANYCH --------------------------- */

  // üîÅ residuals
  useEffect(() => {
    if (activeTab !== "assumptions" || residualsData) return;
    fetch("http://localhost:8000/analyze-residuals", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ triangle, alpha }),
    })
      .then((res) => (res.ok ? res.json() : Promise.reject(res)))
      .then((json: ResidualsResp) => setResidualsData(json))
      .catch(() => setError("B≈ÇƒÖd pobierania danych z /analyze-residuals"));
  }, [activeTab, alpha, residualsData]);

  // üîÅ dependence
  useEffect(() => {
    if (activeTab !== "analysis" || dependenceData) return;
    fetch("http://localhost:8000/analyze-dependence", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ triangle, alpha: 1 - ci }),
    })
      .then((res) => (res.ok ? res.json() : Promise.reject(res)))
      .then((json: DependenceResp) => setDependenceData(json))
      .catch(() => setError("B≈ÇƒÖd pobierania danych z /analyze-dependence"));
  }, [activeTab, ci, dependenceData]);

  /* --- ‚¨á‚ßâ NOWE ‚¨á  (fetch /analyze-dep2) ---------------------------------- */
  useEffect(() => {
    if (activeTab !== "summary" || dep2Data) return;
    fetch("http://localhost:8000/analyze-dep2", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ triangle, ci }),
    })
      .then((res) => (res.ok ? res.json() : Promise.reject(res)))
      .then((json: Dep2Resp) => setDep2Data(json))
      .catch(() => setError("B≈ÇƒÖd pobierania danych z /analyze-dep2"));
  }, [activeTab, ci, dep2Data]);
  /* --- ‚¨Ü‚ßâ NOWE ‚¨Ü --------------------------------------------------------- */

  /* -------------------------- PRZYGOTOWANIE DANYCH ------------------------- */

  const chartData = useMemo(() => {
    if (!residualsData) return [];
    return CHARTS.map((cfg) => ({
      ...cfg,
      scatter: residualsData.obs_vs_fitted.map((d) => ({
        x: cfg.xAccessor(d),
        y: d.standard_residuals,
      })),
      lowess: residualsData.lowess_results[cfg.key].map((d) => ({
        x: d.x,
        y: d.lowess,
      })),
    }));
  }, [residualsData]);

  const formattedSummary: CorRowData[] = useMemo(() => {
    if (!dependenceData) return [];
    return [
      ["T", dependenceData.summary.results["T"] ?? null],
      ["E[T]", dependenceData.summary.results["E[T]"] ?? null],
      ["Var[T]", dependenceData.summary.results["Var[T]"] ?? null],
      ["Lower", dependenceData.summary.range.Lower ?? null],
      ["Upper", dependenceData.summary.range.Upper ?? null],
    ];
  }, [dependenceData]);

  /* --- ‚¨á‚ßâ NOWE ‚¨á  (dane do tabeli summary) -------------------------------- */
const summaryTable: CorRowData[] = useMemo(() => {
  if (!dep2Data) return [];
  return [
    ["Z",      dep2Data.totals["Z"]],
    ["E[Z]",   dep2Data.totals["E[Z]"]],
    ["Var[Z]", dep2Data.totals["Var[Z]"]],
    ["Lower",  dep2Data.range.Lower],
    ["Upper",  dep2Data.range.Upper],
  ];
}, [dep2Data]);

  /* --- ‚¨Ü‚ßâ NOWE ‚¨Ü --------------------------------------------------------- */

  /* ------------------------------------------------------------------------ */
  /*                                RENDER                                    */
  /* ------------------------------------------------------------------------ */

/* -------- przed returnem, tu≈º nad  return ( ... )  -------------------- */
/* =======================  BLOK RENDERUJƒÑCY  ========================== */
return (
  <div>
    {/* üîò Zak≈Çadki */}
    <nav className="flex gap-10 border-b border-slate-700 mb-6">
      {[
        { key: "model",       label: "Model" },
        { key: "assumptions", label: "Analiza reszt" },
        { key: "analysis",    label: "Analiza korelacji czynnik√≥w rozwoju" },
        { key: "summary",     label: "Analiza niezale≈ºno≈õci lat wypadkowych" },
      ].map(({ key, label }) => (
        <button
          key={key}
          onClick={() => setActiveTab(key as TabKey)}
          className={`
            relative pb-2 text-sm sm:text-base font-semibold transition-colors
            ${
              activeTab === key
                ? "text-sky-400 after:absolute after:left-0 after:bottom-0 after:h-0.5 after:w-full after:bg-sky-400"
                : "text-slate-300 hover:text-sky-300"
            }
          `}
        >
          {label}
        </button>
      ))}
    </nav>

    {/* üéöÔ∏è suwaki alpha / ci */}
    {activeTab === "assumptions" && (
      <div className="mb-4 text-white">
        <label className="mr-2 font-medium">Alpha (dla wag):</label>
        <input
          type="range"
          min="0"
          max="2"
          step="0.01"
          value={alpha}
          onChange={(e) => setAlpha(parseFloat(e.target.value))}
          className="w-64"
        />
        <span className="ml-3">{alpha.toFixed(2)}</span>
      </div>
    )}
    {activeTab === "analysis" && (
      <div className="mb-4 text-white">
        <label className="mr-2 font-medium">Przedzia≈Ç ufno≈õci (ci):</label>
        <input
          type="range"
          min="0.01"
          max="0.99"
          step="0.01"
          value={ci}
          onChange={(e) => setCi(parseFloat(e.target.value))}
          className="w-64"
        />
        <span className="ml-3">{(ci * 100).toFixed(0)}%</span>
      </div>
    )}

    {/* üñºÔ∏è ASSUMPTIONS ‚Äì wykresy reszt */}
    {activeTab === "assumptions" && (
      <>
        {error && <p className="text-destructive">{error}</p>}
        {!residualsData && <p className="italic">≈Åadowanie‚Ä¶</p>}
        {residualsData && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {chartData.map(({ title, xLabel, scatter, lowess }, idx) => (
              <Card key={idx} className="bg-gray-500">
                <CardHeader className="text-base font-medium">{title}</CardHeader>
                <CardContent className="p-6 bg-gray-300">
                  <ResponsiveContainer width="100%" height={300}>
                    <ComposedChart data={scatter} margin={{ top: 20, right: 20, bottom: 30, left: 50 }}>
                      <CartesianGrid stroke="#666" strokeOpacity={0.5} strokeDasharray="3 3" />
                      <XAxis type="number" dataKey="x" label={{ value: xLabel, position: "insideBottom", offset: -10, fill: "#333" }} />
                      <YAxis
                        dataKey="y"
                        type="number"
                        domain={[-2, 2]}
                        ticks={[-2, -1, 0, 1, 2]}
                        label={{ value: "Standardised residuals", angle: -90, position: "insideLeft", offset: 10, fill: "#333" }}
                        axisLine={{ stroke: "#666" }}
                        tick={{ fill: "#333" }}
                      />
                      <Tooltip formatter={(v: number) => v.toFixed(3)} contentStyle={{ background: "#e5e7eb" }} />
                      <Scatter name="Residuals" data={scatter} fill="#000" shape="circle" />
                      <Line name="LOWESS" type="monotone" data={lowess} dataKey="y" dot={false} stroke="#ff5252" strokeWidth={2} />
                      <ReferenceLine y={0} strokeDasharray="4 4" stroke="#555" />
                    </ComposedChart>
                  </ResponsiveContainer>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </>
    )}

    {/* üìä ANALYSIS ‚Äì Spearman¬†T */}
    {activeTab === "analysis" && (
      <>
        {error && <p className="text-destructive">{error}</p>}
        {!dependenceData && <p className="italic">≈Åadowanie‚Ä¶</p>}
        {dependenceData && (
          <div className="flex flex-col items-center gap-8 text-white px-4">
            <h3 className="text-lg font-semibold mb-2">Analiza zale≈ºno≈õci w¬†tr√≥jkƒÖcie</h3>
            <div className="w-full max-w-xl flex flex-col items-center gap-2 mb-6">
              <label htmlFor="ci-range" className="text-sm font-medium">Przedzia≈Ç ufno≈õci (ci):</label>
              <input
                id="ci-range"
                type="range"
                min={0.5}
                max={0.99}
                step={0.01}
                value={ci}
                onChange={(e) => setCi(parseFloat(e.target.value))}
                className="w-full"
              />
              <span className="text-xs">{Math.round(ci * 100)}%</span>
            </div>

            <TableDataCor data={formattedSummary} />

            {dependenceData.density_plot && (
              <div className="bg-white border border-gray-300 rounded shadow p-4 text-gray-800 w-full max-w-2xl">
                <h4 className="text-sm font-medium mb-2">Gƒôsto≈õƒá rozk≈Çadu testu</h4>
                <ResponsiveContainer width="100%" height={300}>
                  <ComposedChart data={dependenceData.density_plot.curve.map(([x, y]) => ({ x, y }))}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis type="number" dataKey="x" domain={[-1, 1]} />
                    <YAxis />
                    <Tooltip formatter={(v: number) => v.toFixed(3)} />
                    <Line type="monotone" dataKey="y" stroke="#000" dot={false} strokeWidth={1.5} />
                    <Area
                      type="monotone"
                      dataKey="y"
                      data={dependenceData.density_plot.ci_area.map(([x, y]) => ({ x, y }))}
                      fill="#999"
                      fillOpacity={0.4}
                      isAnimationActive={false}
                    />
                    <ReferenceLine x={dependenceData.density_plot.T_stat} stroke="red" strokeWidth={2} />
                  </ComposedChart>
                </ResponsiveContainer>
              </div>
            )}
          </div>
        )}
      </>
    )}

    {/* üßæ SUMMARY ‚Äì kalendarzowe lata */}
    {activeTab === "summary" && (
      <div className="flex flex-col items-center gap-6 text-white px-4">
        {error && <p className="text-destructive">{error}</p>}
        {!dep2Data && <p className="italic">≈Åadowanie‚Ä¶</p>}

        {dep2Data && (
          <>
            <h3 className="text-lg font-semibold">Test niezale≈ºno≈õci¬†‚Äì kalendarzowe lata wypadkowe</h3>
            <TableDataCor data={summaryTable} />

            {(() => {
              /* --------- przygotowanie danych --------- */
              const dens = dep2Data.density_plot;
              if (!dens) return null;

              const curve  = dens.curve;
              const ciArea = dens.ci_area;
              const Z      = dens.Z_stat;

const domain: [number, number] = [
  Math.min(curve[0]![0], Z),
  Math.max(curve[curve.length - 1]![0], Z),
];
const EZ = dep2Data.totals["E[Z]"];   // ‚¨ÖÔ∏è  ≈õrednia

              /* --------------- wykres ----------------- */
              return (
                <div className="bg-white border border-gray-300 rounded shadow p-4 text-gray-800 w-full max-w-2xl">
                  <h4 className="text-sm font-medium mb-2">Gƒôsto≈õƒá rozk≈Çadu testu</h4>
                  <ResponsiveContainer width="100%" height={300}>
                    <ComposedChart data={curve.map(([x, y]) => ({ x, y }))}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis type="number" dataKey="x" domain={domain} />
                      <YAxis />
                      <Tooltip formatter={(v: number) => v.toFixed(3)} />
                      <Line type="monotone" dataKey="y" stroke="#000" dot={false} strokeWidth={1.5} />
                      <Area
                        type="monotone"
                        dataKey="y"
                        data={ciArea.map(([x, y]) => ({ x, y }))}
                        fill="#999"
                        fillOpacity={0.4}
                        isAnimationActive={false}
                      />
                      {/* üî¥ pionowa linia w¬†punkcie¬†Z */}
                      <ReferenceLine x={EZ} stroke="red" strokeWidth={2} isFront />
                    </ComposedChart>
                  </ResponsiveContainer>
                </div>
              );
            })()}
          </>
        )}
      </div>
    )}
  </div>
);
}
