    # ---- 2. Simulation parameters -----------------------------------------
    wykluczenia = [1, 2, 3, 4, 5, 6, 7]
    Poz_CL = 7
    il_ogon = 41
    net_to_gross = 0.767576629939175
    import numpy as np
    import pandas as pd

    import numpy as np
    import pandas as pd


    def triangle_forward_np(data, f, k_forward_start, discount_factors):
        data = data.copy()
        mm, nn = data.shape

        # Zachowujemy oryginalną pierwszą kolumnę
        base_col = data[:, 0].copy()

        # Rozszerz dane, jeśli trzeba
        if len(f) > mm:
            pad_width = len(f) + 1 - nn
            if pad_width > 0:
                data = np.hstack((data, np.full((mm, pad_width), np.nan)))

        # Projekcja forward
        for j in range(k_forward_start - 1, len(f)):
            max_ind_row = max(0, mm - j - 1)
            for i in range(max_ind_row, mm):
                data[i, j + 1] = data[i, j] * f[j]

        # Tworzenie trójkąta z bazową kolumną
        cols_tmp = data.shape[1]
        tri_proj = np.full((mm, cols_tmp + 1), np.nan)
        tri_proj[:, 0] = base_col
        tri_proj[:, 1:] = data


        # Liczymy przyrosty (różnice kolumna po kolumnie)
        inc_proj = tri_proj[:, 1:] - tri_proj[:, :-1]
        inc_proj[:, 0] = base_col
        total = np.nansum(inc_proj)

        # Dyskontujemy tylko wartości na prawo od odwrotnej przekątnej
        for rr in range(mm - 1, -1, -1):
            offset = mm - 1 - rr
            for cc in range(offset + 1, inc_proj.shape[1]):
                idx = cc - (offset + 1)
                if idx < len(discount_factors) and not np.isnan(inc_proj[rr, cc]):
                    inc_proj[rr, cc] /= discount_factors[idx]


        total = np.nansum(inc_proj)
        return 1  # lub np.nansum(inc_proj[:, -1]) jeśli chcesz sumę


    print(triangle_forward_np(data_paid_np, dev_arr, 0,discount_factors))



    # ---- 3. Run simulation -------------------------------------------------
    sim = StochasticTriangleSimulator(
        data_paid=data_paid_np,
        data_wagi=data_wagi_np,
        dev=dev_arr,
        sigma_j=sigma_j_arr,
        sd=sd_arr,
        discount_factors=discount_factors,
        net_to_gross=net_to_gross,
        wykluczenia=wykluczenia,
        Poz_CL=Poz_CL,
        il_ogon=il_ogon,
    )

    sim.run(sim_total=100000, batch_sim=1000, seed=202260011)

    # ---- 4. Results --------------------------------------------------------
    ultimate_base = [4_232_149_669, 4_075_793_358, 3_894_728_405]
    factor = 1.1392

    sim.summary(ultimate_base=ultimate_base, factor=factor)
