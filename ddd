def fit_curve_factor_LR(f_input, sd_input, x_k):
    """
    Dopasowanie regresji liniowej log(f_j) = a + b * j
    z wagami opartymi o wariancję log(f_j) wg Mack'a.
    """
    # krok 1: se^2
    se_factor = [x ** 2 for x in sd_input]

    # krok 2: wagi 1 / sqrt(log(1 + (se/f)^2))
    w_k_sqr = [
        1 / np.sqrt(np.log(1 + (se_f / (f - 1e-12)) ** 2))
        for f, se_f in zip(f_input, se_factor)
    ]

    # krok 3: log(f_j)
    factor_input = [np.log(f) for f in f_input]

    # krok 4: sumy ważone
    A = np.sum(w_k_sqr)
    A_x = np.sum([w * x for w, x in zip(w_k_sqr, x_k)])
    A_x_x = np.sum([w * x * x for w, x in zip(w_k_sqr, x_k)])
    A_y = np.sum([w * y for w, y in zip(w_k_sqr, factor_input)])
    A_x_y = np.sum([w * x * y for w, x, y in zip(w_k_sqr, x_k, factor_input)])

    Delta = A * A_x_x - A_x ** 2
    a = (A_x_x * A_y - A_x * A_x_y) / Delta
    b = (A * A_x_y - A_x * A_y) / Delta

    return [a, b]
